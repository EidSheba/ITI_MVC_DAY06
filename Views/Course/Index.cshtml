@model CourseManagement.Business.ViewModels.CourseListVM
@using CourseManagement.Data.Models

@{
    ViewData["Title"] = "Courses";
}

<div class="container mt-4">
    <h1 class="mb-4">Course Management</h1>

    @* Success/Error Messages *@
    @if (TempData["Success"] != null)
    {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
    }
    @if (TempData["Error"] != null)
    {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
    }

    @* Filter, Search and Create Button *@
    <div class="row mb-3">
        <div class="col-md-8">
            <form asp-action="Index" method="get" class="row g-2 align-items-center">
                <div class="col-auto">
                    <select name="category" class="form-select" onchange="this.form.submit()">
                        <option value="">All Categories</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                                <option value="@category" selected="@(category.ToString() == ViewBag.SelectedCategory?.ToString())">
                                @category
                                </option>
                        }
                    </select>
                </div>
                <div class="col">
                    <input type="text" name="search" value="@Model.Search" class="form-control" placeholder="Search by course name..." />
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-outline-secondary">Search</button>
                </div>
                <div class="col-auto">
                    <select name="pageSize" class="form-select" onchange="this.form.submit()" title="Items per page">
                        <option value="5" selected="@(Model.PageSize == 5)">5</option>
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="20" selected="@(Model.PageSize == 20)">20</option>
                        <option value="50" selected="@(Model.PageSize == 50)">50</option>
                    </select>
                </div>
                <input type="hidden" name="page" value="1" />
            </form>
        </div>
        <div class="col-md-4 text-end">
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Create New Course
            </a>
        </div>
    </div>

    @* Courses Table *@
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Instructor</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Duration</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Items.Any())
                {
                    @foreach (var course in Model.Items)
                    {
                                <tr>
                                    <td>@Html.Raw(HighlightMatch(course.Name, Model.Search))</td>
                                    <td>@course.Description</td>
                                    <td><span class="badge bg-info">@course.Category</span></td>
                                    <td>@course.InstructorName</td>
                                    <td>@course.StartDate.ToString("yyyy-MM-dd")</td>
                                    <td>@course.EndDate.ToString("yyyy-MM-dd")</td>
                                    <td>@course.Duration</td>
                                    <td>
                                @if (course.IsActive)
                                {
                                                <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                                <span class="badge bg-secondary">Inactive</span>
                                }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@course.Id" class="btn btn-sm btn-info" title="Details">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@course.Id" class="btn btn-sm btn-warning" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@course.Id" class="btn btn-sm btn-danger" title="Delete">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                    }
                }
                else
                {
                        <tr>
                            <td colspan="9" class="text-center">No courses found.</td>
                        </tr>
                }
            </tbody>
        </table>
    </div>

    @* Always show Pagination *@
    <nav aria-label="Course pagination">
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-category="@Model.Category" asp-route-search="@Model.Search" asp-route-page="@(Model.Page - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.Page ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-category="@Model.Category" asp-route-search="@Model.Search" asp-route-page="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                </li>
            }
            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-category="@Model.Category" asp-route-search="@Model.Search" asp-route-page="@(Model.Page + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
            </li>
        </ul>
    </nav>
</div>

@functions {
    private string HighlightMatch(string text, string search)
    {
        if (string.IsNullOrWhiteSpace(text) || string.IsNullOrWhiteSpace(search))
        {
            return System.Net.WebUtility.HtmlEncode(text ?? string.Empty);
        }

        var index = text.IndexOf(search, StringComparison.OrdinalIgnoreCase);
        if (index < 0)
        {
            return System.Net.WebUtility.HtmlEncode(text);
        }

        var before = System.Net.WebUtility.HtmlEncode(text.Substring(0, index));
        var match = System.Net.WebUtility.HtmlEncode(text.Substring(index, search.Length));
        var after = System.Net.WebUtility.HtmlEncode(text.Substring(index + search.Length));

        return $"{before}<mark>{match}</mark>{after}";
    }
}